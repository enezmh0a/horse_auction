// lib/main.dart
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'firebase_options.dart';
import 'package:firebase_core/firebase_core.dart';

import 'features/horses/horse_list_screen.dart';
import 'features/horses/horse_detail_screen.dart';
import 'l10n/generated/app_localizations.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // Log all Flutter errors to the console to help debug red screen causes
  FlutterError.onError = (FlutterErrorDetails details) {
    FlutterError.dumpErrorToConsole(details);
  };

  runApp(const Root());
}

class Root extends StatefulWidget {
  const Root({super.key});
  @override
  State<Root> createState() => _RootState();
}

class _RootState extends State<Root> {
  Locale? _locale;

  void _setLocale(Locale? locale) {
    setState(() => _locale = locale);
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      locale: _locale,
      supportedLocales: AppLocalizations.supportedLocales,
      localizationsDelegates: const [
        AppLocalizations.delegate,                // generated by flutter gen-l10n
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      home: HorseListScreen(onLocaleChange: _setLocale), // pass language toggler
      onGenerateRoute: (settings) {
        if (settings.name == '/horse') {
          final lotId = settings.arguments as String?;
          if (lotId == null || lotId.isEmpty) {
            return MaterialPageRoute(
              builder: (_) => const _RouteError(msg: 'Missing lot id'),
            );
          }
          return MaterialPageRoute(
            builder: (_) => HorseDetailScreen(lotId: lotId),
          );
        }
        return MaterialPageRoute(
          builder: (_) => const _RouteError(msg: 'Unknown route'),
        );
      },
    );
  }
}

class _RouteError extends StatelessWidget {
  const _RouteError({required this.msg});
  final String msg;

  @override
  Widget build(BuildContext context) {
    final t = AppLocalizations.of(context);
    return Scaffold(
      appBar: AppBar(title: Text(t?.error ?? 'Error')),
      body: Center(child: Text(msg)),
    );
  }
}
