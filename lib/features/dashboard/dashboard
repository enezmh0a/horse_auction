// lib/features/dashboard/dashboard_page.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class DashboardPage extends StatelessWidget {
  const DashboardPage({super.key});

  Stream<int> _count(Query q) async* {
    // simple live count; aggregation would be better, but this is fine to start
    await for (final s in q.snapshots()) {
      yield s.size;
    }
  }

  @override
  Widget build(BuildContext context) {
    final lots = FirebaseFirestore.instance.collection('lots');

    final tiers = ['silver', 'gold', 'platinum', 'diamond'];
    final tierStreams = {
      for (final t in tiers) t: _count(lots.where('tier', isEqualTo: t)),
    };

    final live = _count(lots.where('status', isEqualTo: 'live'));
    final closed = _count(lots.where('status', isEqualTo: 'closed'));

    return ListView(
      padding: const EdgeInsets.all(16),
      children: [
        Wrap(
          spacing: 12, runSpacing: 12,
          children: [
            _CardCount(title: 'Live',    stream: live,    color: Colors.green),
            _CardCount(title: 'Closed',  stream: closed,  color: Colors.grey),
            for (final t in tiers)
              _CardCount(
                title: t[0].toUpperCase() + t.substring(1),
                stream: tierStreams[t]!,
                color: _tierColor(t),
              ),
          ],
        ),
        const SizedBox(height: 24),
        Text('Recent activity', style: Theme.of(context).textTheme.titleLarge),
        const SizedBox(height: 8),
        StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(
          stream: lots.orderBy('tsUpdated', descending: true).limit(6).snapshots(),
          builder: (context, snap) {
            if (snap.connectionState == ConnectionState.waiting) {
              return const Center(child: Padding(
                padding: EdgeInsets.all(24), child: CircularProgressIndicator()));
            }
            final docs = snap.data?.docs ?? [];
            if (docs.isEmpty) return const Text('No recent updates');

            return Column(
              children: docs.map((d) {
                final data = d.data();
                final title = (data['title'] ?? d.id).toString();
                final tier  = (data['tier']  ?? '').toString();
                final status= (data['status']?? '').toString();
                return ListTile(
                  leading: CircleAvatar(backgroundColor: _tierColor(tier)),
                  title: Text(title),
                  subtitle: Text('Tier: ${tier.isEmpty ? '—' : tier} • Status: $status'),
                );
              }).toList(),
            );
          },
        )
      ],
    );
  }

  Color _tierColor(String t) {
    switch (t.toLowerCase()) {
      case 'silver':   return Colors.blueGrey;
      case 'gold':     return Colors.amber;
      case 'platinum': return Colors.indigo;
      case 'diamond':  return Colors.cyan;
      default:         return Colors.purple;
    }
  }
}

class _CardCount extends StatelessWidget {
  const _CardCount({required this.title, required this.stream, required this.color});
  final String title; final Stream<int> stream; final Color color;

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<int>(
      stream: stream,
      builder: (context, s) {
        final count = s.data ?? 0;
        return Card(
          elevation: 0,
          color: color.withOpacity(.1),
          child: SizedBox(
            width: 220, height: 92,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children:[
                  Text(title, style: Theme.of(context).textTheme.titleMedium),
                  const Spacer(),
                  Text('$count',
                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                      color: color, fontWeight: FontWeight.w700)),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
}
