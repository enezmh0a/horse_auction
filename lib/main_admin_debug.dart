import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_functions/cloud_functions.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';
import 'package:horse_auction_baseline/models/lot_model.dart';

// Make sure this exists (generated by FlutterFire CLI):
import 'firebase_options.dart';

Future<void> ensureAnonSignIn() async {
  final auth = FirebaseAuth.instance;
  if (auth.currentUser == null) {
    await auth.signInAnonymously();
  }
}

/// Forces a token refresh and returns whether the user has admin=true.
Future<
  (bool isAdmin, Map<String, dynamic>? claims, String uid, String tokenDebug)
>
refreshAdminClaim() async {
  final auth = FirebaseAuth.instance;
  var user = auth.currentUser;
  user ??= (await auth.signInAnonymously()).user;

  await user!.getIdToken(true); // force refresh to pull new custom claims
  final token = await user.getIdTokenResult(true);
  final isAdmin = token.claims?['admin'] == true;

  // Small decoded snippet for display
  final snippet =
      'sub: ${token.claims?['sub'] ?? user.uid}, '
      'firebase: ${token.claims?['firebase'] ?? {}}, '
      'sign_in_provider: ${(token.claims?['firebase'] as Map?)?['sign_in_provider'] ?? 'unknown'}';

  return (
    isAdmin,
    (token.claims ?? {}) as Map<String, dynamic>?,
    user.uid,
    snippet,
  );
}

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  runApp(const MyApp()); // or your root
}

class AdminDebugApp extends StatelessWidget {
  const AdminDebugApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Horse Auction — Admin Debug',
      theme: ThemeData(colorSchemeSeed: Colors.brown, useMaterial3: true),
      home: const AdminHome(),
    );
  }
}

class AdminHome extends StatefulWidget {
  const AdminHome({super.key});
  @override
  State<AdminHome> createState() => _AdminHomeState();
}

class _AdminHomeState extends State<AdminHome> {
  final _lotId = TextEditingController();
  final _bidId = TextEditingController();
  String _uid = '';
  String _tokenDebug = '';
  bool _isAdmin = false;
  Map<String, dynamic>? _claims;
  String _status = '—';

  // TEMP: functions are deployed in me-central1 while we unblock me-central2
  final FirebaseFunctions _f = FirebaseFunctions.instanceFor(
    region: 'me-central1',
  );

  @override
  void initState() {
    super.initState();
    _refreshClaims();
  }

  Future<void> _refreshClaims() async {
    setState(() => _status = 'Refreshing token & claims…');
    final (isAdmin, claims, uid, tokenDbg) = await refreshAdminClaim();
    setState(() {
      _isAdmin = isAdmin;
      _claims = claims;
      _uid = uid;
      _tokenDebug = tokenDbg;
      _status = 'Ready';
    });
  }

  void _copyUid() {
    if (_uid.isEmpty) return;
    Clipboard.setData(ClipboardData(text: _uid));
    ScaffoldMessenger.of(
      context,
    ).showSnackBar(const SnackBar(content: Text('UID copied')));
  }

  Future<void> _accept() async {
    final lotId = _lotId.text.trim();
    final bidId = _bidId.text.trim();
    if (lotId.isEmpty || bidId.isEmpty) {
      setState(() => _status = 'Enter lotId and bidId');
      return;
    }
    try {
      setState(() => _status = 'Calling acceptBid…');
      final callable = _f.httpsCallable('acceptBid');
      await callable.call({'lotId': lotId, 'bidId': bidId});
      setState(() => _status = '✅ acceptBid OK');
    } on FirebaseFunctionsException catch (e) {
      setState(() => _status = '❌ ${e.code}: ${e.message}');
    } catch (e) {
      setState(() => _status = '❌ $e');
    }
  }

  Future<void> _reject() async {
    final lotId = _lotId.text.trim();
    final bidId = _bidId.text.trim();
    if (lotId.isEmpty || bidId.isEmpty) {
      setState(() => _status = 'Enter lotId and bidId');
      return;
    }
    try {
      setState(() => _status = 'Calling rejectBid…');
      final callable = _f.httpsCallable('rejectBid');
      await callable.call({'lotId': lotId, 'bidId': bidId});
      setState(() => _status = '✅ rejectBid OK');
    } on FirebaseFunctionsException catch (e) {
      setState(() => _status = '❌ ${e.code}: ${e.message}');
    } catch (e) {
      setState(() => _status = '❌ $e');
    }
  }

  @override
  void dispose() {
    _lotId.dispose();
    _bidId.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final infoStyle = Theme.of(context).textTheme.bodyMedium;
    return Scaffold(
      appBar: AppBar(title: const Text('Admin Debug Panel')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: ListView(
          children: [
            // Token/claims quick line (selectable)
            SelectableText(_tokenDebug, style: infoStyle),
            const SizedBox(height: 8),

            // UID row with Copy button
            Row(
              children: [
                Expanded(child: SelectableText('UID: $_uid', style: infoStyle)),
                IconButton(
                  tooltip: 'Copy UID',
                  onPressed: _uid.isEmpty ? null : _copyUid,
                  icon: const Icon(Icons.copy),
                ),
              ],
            ),
            const SizedBox(height: 12),

            FilledButton.icon(
              onPressed: _refreshClaims,
              icon: const Icon(Icons.refresh),
              label: const Text('Refresh token & claims'),
            ),
            const Divider(height: 32),

            TextField(
              controller: _lotId,
              decoration: const InputDecoration(
                labelText: 'lotId',
                hintText: 'e.g. lot04',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _bidId,
              decoration: const InputDecoration(
                labelText: 'bidId',
                hintText: 'Firestore doc id of the bid',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            Wrap(
              spacing: 12,
              children: [
                FilledButton(
                  onPressed: _isAdmin ? _accept : null,
                  child: const Text('Accept'),
                ),
                OutlinedButton(
                  onPressed: _isAdmin ? _reject : null,
                  child: const Text('Reject'),
                ),
              ],
            ),
            const SizedBox(height: 20),
            Text('Status: $_status', style: infoStyle),
            const SizedBox(height: 8),
            const Text(
              'Note: functions region is TEMP me-central1; switch back to me-central2 once access is enabled.',
              style: TextStyle(fontSize: 12, fontStyle: FontStyle.italic),
            ),
          ],
        ),
      ),
    );
  }
}
